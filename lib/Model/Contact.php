<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Inwendo\WebDav\Common
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inwendo WebDav Service
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Inwendo\WebDav\Common\Model;

use \ArrayAccess;

/**
 * Contact Class Doc Comment
 *
 * @category    Class */
 // @description 
/** 
 * @package     Inwendo\WebDav\Common
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'note' => 'string',
        'phone_numbers' => 'string[]',
        'fax_numbers' => 'string[]',
        'emails' => 'string[]',
        'addresses' => 'string[]',
        'companies' => 'string[]',
        'urls' => 'string[]',
        'jobtitles' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'note' => 'note',
        'phone_numbers' => 'phoneNumbers',
        'fax_numbers' => 'faxNumbers',
        'emails' => 'emails',
        'addresses' => 'addresses',
        'companies' => 'companies',
        'urls' => 'urls',
        'jobtitles' => 'jobtitles'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'note' => 'setNote',
        'phone_numbers' => 'setPhoneNumbers',
        'fax_numbers' => 'setFaxNumbers',
        'emails' => 'setEmails',
        'addresses' => 'setAddresses',
        'companies' => 'setCompanies',
        'urls' => 'setUrls',
        'jobtitles' => 'setJobtitles'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'note' => 'getNote',
        'phone_numbers' => 'getPhoneNumbers',
        'fax_numbers' => 'getFaxNumbers',
        'emails' => 'getEmails',
        'addresses' => 'getAddresses',
        'companies' => 'getCompanies',
        'urls' => 'getUrls',
        'jobtitles' => 'getJobtitles'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['fax_numbers'] = isset($data['fax_numbers']) ? $data['fax_numbers'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['companies'] = isset($data['companies']) ? $data['companies'] : null;
        $this->container['urls'] = isset($data['urls']) ? $data['urls'] : null;
        $this->container['jobtitles'] = isset($data['jobtitles']) ? $data['jobtitles'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ($this->container['phone_numbers'] === null) {
            $invalid_properties[] = "'phone_numbers' can't be null";
        }
        if ($this->container['fax_numbers'] === null) {
            $invalid_properties[] = "'fax_numbers' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalid_properties[] = "'emails' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalid_properties[] = "'addresses' can't be null";
        }
        if ($this->container['companies'] === null) {
            $invalid_properties[] = "'companies' can't be null";
        }
        if ($this->container['urls'] === null) {
            $invalid_properties[] = "'urls' can't be null";
        }
        if ($this->container['jobtitles'] === null) {
            $invalid_properties[] = "'jobtitles' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['last_name'] === null) {
            return false;
        }
        if ($this->container['phone_numbers'] === null) {
            return false;
        }
        if ($this->container['fax_numbers'] === null) {
            return false;
        }
        if ($this->container['emails'] === null) {
            return false;
        }
        if ($this->container['addresses'] === null) {
            return false;
        }
        if ($this->container['companies'] === null) {
            return false;
        }
        if ($this->container['urls'] === null) {
            return false;
        }
        if ($this->container['jobtitles'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets phone_numbers
     * @return string[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     * @param string[] $phone_numbers
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets fax_numbers
     * @return string[]
     */
    public function getFaxNumbers()
    {
        return $this->container['fax_numbers'];
    }

    /**
     * Sets fax_numbers
     * @param string[] $fax_numbers
     * @return $this
     */
    public function setFaxNumbers($fax_numbers)
    {
        $this->container['fax_numbers'] = $fax_numbers;

        return $this;
    }

    /**
     * Gets emails
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     * @param string[] $emails
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets addresses
     * @return string[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     * @param string[] $addresses
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets companies
     * @return string[]
     */
    public function getCompanies()
    {
        return $this->container['companies'];
    }

    /**
     * Sets companies
     * @param string[] $companies
     * @return $this
     */
    public function setCompanies($companies)
    {
        $this->container['companies'] = $companies;

        return $this;
    }

    /**
     * Gets urls
     * @return string[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     * @param string[] $urls
     * @return $this
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets jobtitles
     * @return string[]
     */
    public function getJobtitles()
    {
        return $this->container['jobtitles'];
    }

    /**
     * Sets jobtitles
     * @param string[] $jobtitles
     * @return $this
     */
    public function setJobtitles($jobtitles)
    {
        $this->container['jobtitles'] = $jobtitles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Inwendo\WebDav\Common\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Inwendo\WebDav\Common\ObjectSerializer::sanitizeForSerialization($this));
    }
}


